____________________________________________________________________________________________________________________________________________________________
12. Package Management:
        A.Destro-Independend PM 'Universal':
                        1. 'snap'.       2. 'flatpak'.       3. 'AppImage'.            sudo [PM] [options] [command]
        B.Destro-dependenet PM :
                        1. 'dpkg'.       2. 'apt'.           3. 'apt-get'.             sudo [PM] [options] [command]

        1."dpkg":
                - dpkg is a low-level package management tool used in 
                  Debian-based Linux distributions (like Debian, Ubuntu, etc.) to install, remove, and manage .deb packages. 
                  Unlike higher-level tools like apt, dpkg does not automatically resolve package dependencies.
                - Disadvantages:
                        - dpkg does not automatically resolve package dependencies.
                        - dpkg does not handle package conflicts.
                        - dpkg does not handle package upgrades.
                        - dpkg requires downloading the packages before installation:
                                         Tools like wget or curl can be used to download .deb packages directly from a known URL. 
                                         
                        - wget <package-url>
                          sudo dpkg -i <downloaded-package-name>.deb                 
                - Example:
                        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                        sudo dpkg -i google-chrome-stable_current_amd64.deb

                - Common Options : 
                        dpkg -l <package-name>          : Lists the status of installed packages matching the given name (or partial name).
                        dpkg -L <package-name>          : A list of file paths where the package's components are installed (e.g., binaries, configuration files, libraries).
                        dpkg -s <package-name>          : Provides detailed information about the installed package, including: Version, Status, Description, Maintainer, Architecture.
                        dpkg -i <package-name>.deb
                        dpkg -r <package-name>
                        dpkg -P <package-name>
        
        2."apt":
                - apt is a higher-level package management tool used in 
                  Debian-based Linux distributions (like Debian, Ubuntu, etc.) to install, remove, and manage .deb packages. 
                  It automatically resolves package dependencies and handles package conflicts and upgrades.
                - Advantages:
                        - apt automatically resolves package dependencies.
                        - apt handles package conflicts.
                        - apt handles package upgrades.
                        - apt can be used to search for packages, list installed packages, and list available packages.

                _____________________________________________________________________________________________________________
                # Commands:      
                        sudo apt list                             - List packages based on package names
                        sudo apt list --installed                 - Displays all installed packages on the system.   
                        
                        sudo apt depends  <package_name>          - Lists all dependencies of a package.  
                        sudo apt rdepends <package_name>          - Lists reverse dependencies (packages that depend on the specified package).    
                        
                        sudo apt search <package_name>            - Searches for packages matching the provided name.
                        sudo apt show   <package_name>            - Displays detailed information about a package, such as its description, dependencies, and source.
                        dpkg -l <package-name>                    - Lists the status of installed packages matching the given name (or partial name).
                        dpkg -L <package-name>                    - A list of file paths where the package's components are installed (e.g., binaries, configuration files, libraries).            
                        dpkg -s <package-name>                    - Provides detailed information about the installed package, including: Version, Status, Description, Maintainer, Architecture.

                        sudo apt update                           - update list of available packages
                        sudo apt upgrade                          - upgrade the system by installing/upgrading packages
                        sudo apt full-upgrade                     - upgrade the system by removing/installing/upgrading packages

                        sudo apt install <package_name>           - install packages
                        sudo apt install <package1> <package2>    - Installs multiple packages at once.
                        sudo apt install <package_name>=<version> - Installs a specific version of a package.
                        sudo apt install ./path_to_file.deb       - Installs a .deb package file while handling dependencies.
                        sudo apt reinstall                        - Reinstall packages
                        sudo apt --fix-broken install             - Fixes and completes broken package installations.

                        sudo apt remove <package_name>            - Removes a package but keeps its configuration files.
                        sudo apt purge  <package_name>            - Removes a package and its configuration files.
                        sudo apt autoremove                       - automatically remove all unused packages

                        sudo apt clean                            - Removes all cached .deb files in /var/cache/apt/archives/.  
                        sudo apt autoclean                        - Removes outdated .deb files no longer in repositories.            
                        
                        sudo add-apt-repository <repository>      - Adds a new repository to the sources list (ubunto@myWinHostMachine:/etc/apt$ cat sources.list
                                                                                                                ubunto@myWinHostMachine:/etc/apt/sources.list.d$ cat ubuntu.sources).
                        sudo apt update                           - Always update the package database after adding or modifying repositories.

                        sudo apt edit-sources                     - edit the source information file
                        sudo apt satisfy                          - satisfy dependency strings

      _____________________________________________________________________________________________________________
                # General Options
                        -h, --help:       Displays the help message and usage instructions for the apt command.

                        -v, --version:    Displays the version of apt currently installed on your system.

                        -q, --quiet:      Reduces the output verbosity. Can be used multiple times to further suppress messages.
                                          Example: apt -qq update (Minimal output)
                        
                        -y, --yes:        Automatically answers "yes" to all prompts during package installation or removal.
                                          Example: apt -y install curl
                        
                        --assume-no:      Automatically answers "no" to all prompts.

                        --force-yes:      Forces the operation even if it might cause issues. Use with caution!
                                          Example: apt --force-yes install risky-package
                        
                        --dry-run:        Simulates the command without actually making changes to the system.
                                          Example: apt --dry-run install package_name
------------------------------------------------------------------------------------------------------------------------------------------------------------
13. Services Management:


    A.systemctl (systemd-based systems)
                - Systemctl is the command-line tool used to interact with systemd, 
                the default service manager in most modern Linux distributions like Ubuntu, Fedora, and CentOS.

                    sudo systemctl start   <service_name>	        Starts the specified service.
                    sudo systemctl stop    <service_name>	        Stops the specified service.
                    sudo systemctl restart <service_name>	        Restarts the service (stop and then start).
                    sudo systemctl reload  <service_name>	        Reloads the configuration without stopping the service.
                    sudo systemctl enable  <service_name>	        Enables the service to start on boot.
                    sudo systemctl disable <service_name>	        Disables the service from starting on boot.

                    sudo systemctl is-active  <service_name>	    Checks if the service is active.
                    sudo systemctl is-enabled <service_name>	    Checks if the service is enabled.
                    
                    sudo systemctl list-units --type=service	    Lists all loaded services.
                    systemctl list-dependencies <service_name>      List all dependencies of a service

                    sudo systemctl status  <service_name>	        Displays the running status of the service.
                    sudo journalctl -u <service_name>               Use journalctl with systemd to view logs for a specific service
                    systemctl --failed                              List failed services                              

    B.service (SysVinit/Upstart-based systems)
                - This tool is commonly used for older Linux distributions,
                but is compatible with systemd for backward compatibility.

                    sudo service <service_name> start	            Starts the service.
                    sudo service <service_name> stop	            Stops the service.
                    sudo service <service_name> restart	            Restarts the service.
                    sudo service <service_name> reload	            Reloads the configuration without stopping.
                    sudo service <service_name> status	            Displays the service status.
                    sudo service --status-all	                    Lists all services and their statuses.


    Examples of Common Services

                Service Name        	     Purpose

                    apache2	           Apache HTTP server
                    nginx	           Nginx web server
                    mysql	           MySQL database server
                    docker	           Docker container runtime.

                    ssh	               Secure Shell (SSH) server
                    cron	           Cron job scheduler
                    networking	       Network configuration
                    ufw	               Uncomplicated Firewall
                    cups	           Print service
------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Archive and Compression: 

                1.Archive:    
                            zip                          – Create zip archives.
                            unzip                        – Extract files from zip archives.

                            rar                          – Create RAR archives.
                            unrar                        – Extract files from RAR archives.

                2.Compression: 

                            gzip                         – Compress files using the GZIP format.
                            gunzip                       – Decompress GZIP files.

                            bzip2                        – Compress files using the BZIP2 algorithm.
                            bunzip2                      – Decompress BZIP2 files
                                                
                            xz                           – Compress files using XZ algorithm.
                            unxz                         – Decompress XZ files.
                    
                3.Archive and Compression:
                            tar                          – Create or extract compressed tarballs.
                                ex:
                                    tar -cvf archive.tar file1.txt file2.txt directory/
                                    tar -xvf archive.tar

                                    tar -czvf archive.tar.gz file1.txt file2.txt
                                    tar -xzvf archive.tar.gz
------------------------------------------------------------------------------------------------------------------------------------------------------------
15. Log Management
                    dmesg                       – Print kernel and boot logs.
                    journalctl                  – Query and view logs collected by systemd.
                    logger                      – Add messages to the system log.
                    tail -f                     – Follow log files in real-time.
                    logrotate                   – Rotate and compress logs.
                    syslog                      – Log system events (typically used in /var/log/syslog).
------------------------------------------------------------------------------------------------------------------------------------------------------------
16. Backup and Restore
                    tar                         – Archive and compress files (often used for backups).
                    rsync                       – Synchronize files and directories (useful for backup).
                    dd                          – Copy and convert raw data (useful for creating disk images).
                    cp                          – Copy files and directories.
                    dump                        – Backup a file system.
                    restore                     – Restore a file system from a dump.                
------------------------------------------------------------------------------------------------------------------------------------------------------------
17.Remote Access Management:

    # Concepts:    

        1.openssh-client:
                        - It is a command-line tool for SSH-based remote access and file management.
                        - It is a package that allows users to connect securely to remote machines using SSH.
        2.openssh-server:
                        - It is a package that enables a machine to act as an SSH server, accepting secure connections from SSH clients.
                        - It is a service that allows remote access to a system using SSH.
        3.ssh:
                        - ssh user@remote-host                /   ssh user@remote-host [command]        
                        - It is a command-line tool for secure remote access to a system.
                        - It is used to connect to a remote system using SSH.
                        - It is used to execute commands on a remote system.
                        - It uses a cryptographic network protocol "SSH" for secure communication, remote login, and command execution.
        4.scp:
                        - scp file.txt user@remote-host:/path/to/destination
                        - It is a command-line tool for securely copying files to and from a remote system.
                        - It is used to copy files to and from a remote system using SSH.
        5.sftp:
                        - sftp user@remote-host
                        - It is a command-line tool for securely transferring files to and from a remote system.
                        - It is used to transfer files to and from a remote system using SSH.
        6.rsync:
                        - rsync -avz source/ destination/
                        - It is a command-line tool for synchronizing files and directories between two systems.
                        - It is used to synchronize files and directories between two systems using SSH.
        7.ssh-keygen:
                        - ssh-keygen -t rsa -b 4096
                        - It is a command-line tool for generating public and private SSH keys.
                        - It is used to generate public and private SSH keys for secure authentication.
        8.ssh-agent:
                        - ssh-agent:
                        - It is a command-line tool for securely storing and managing SSH keys.
                        - It is used to securely store and manage SSH keys for authentication.
        9.ssh-add:
                        - ssh-add
                        - It is a command-line tool for adding SSH keys to the SSH agent.
                        - It is used to add SSH keys to the SSH agent for authentication.
        10.ssh-copy-id:
                        - ssh-copy-id user@remote-host
                        - It is a command-line tool for securely copying the local host's SSH keys to the remote.
                        - It is used to securely copy the local host's SSH keys to the remote host for authentication.
        
        11.'~/.ssh' directory:
                        - It is a directory that stores SSH-related files and configuration.
                        - It is used to store SSH keys, configuration files, and other SSH-related files.
                        - It is typically located in the user's home directory.
                        - A hidden folder in a user's home directory used to store SSH-related files, such as keys and configuration.
                        - Contents:
                                   A.On the Client:
                                                                                
                                                1.Public Key "id_rsa.pub":
                                                                - It is a file that contains the public key used for SSH authentication.
                                                                - It is used to authenticate the user on the remote system.
                                                                - It is typically located in the "~/.ssh" directory on the client side.
                                                2.Private Key "id_rsa":
                                                                - It is a file that contains the private key used for SSH authentication.
                                                                - It is used to authenticate the user on the remote system.
                                                                - It is typically located in the "~/.ssh" directory on the client side.
                                                3.'known_hosts' file:
                                                                - It is a file that stores the public keys of the remote systems that the user has connected to using SSH.
                                                                - It is used to verify the identity of the remote system.
                                                                - It is typically located in the "~/.ssh" directory on the client side.
                                                4.'config' file:
                                                                - It is a file for client-side that stores the SSH configuration settings.
                                                                - It is used to customize the SSH connection settings.
                                                                - It is typically located in the "~/.ssh" directory on the client side.        
 
                                   B.On the Server:

                                                1.'authorized_keys:
                                                                - A file on the server containing public keys of clients allowed to connect.
                                                                - It is a file that stores the public keys of the users who are allowed to connect to the remote system using SSH.
                                                                - It is used to authenticate the users on the remote system.
                                                                - It is typically located in the "~/.ssh" directory on the server side.
                                                2.'sshd_config':
                                                                - A file on the server containing SSH server configuration settings.
                                                                - It is a file that stores the SSH server configuration settings.
                                                                - It is used to customize the SSH server settings.
                                                                - It is typically located in the "/etc/ssh" directory on the server side.
