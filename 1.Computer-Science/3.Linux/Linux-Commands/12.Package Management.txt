#_________________________________________________________________________________________________________________________________________________________________________# 
                                                     Package Management 
                                                     ==================
#_________________________________________________________________________________________________________________________________________________________________________# 


12. Management:
        A.Destro-Independend PM 'Universal':
                        1.'snap'.      2.'flatpak'.      3.'AppImage'.           sudo [PM] [options] [command]
        B.Destro-dependenet PM :
                        1.'dpkg'.      2.'apt'.          3.'apt-get'.            sudo [PM] [options] [command]

        1."dpkg":
                - dpkg is a low-level package management tool used in 
                  Debian-based Linux distributions (like Debian, Ubuntu, etc.) to install, remove, and manage .deb packages.
                  Unlike higher-level tools like apt, dpkg does not automatically resolve package dependencies.
                - Disadvantages:
                        - dpkg does not automatically resolve package dependencies.
                        - dpkg does not handle package conflicts.
                        - dpkg does not handle package upgrades.
                        - dpkg requires downloading the packages before installation:
                                         Tools like wget or curl can be used to download .deb packages directly from a known URL.
                                         
                        - wget <package-url>
                          sudo dpkg -i <downloaded-package-name>.deb                 
                - Example:
                        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                        sudo dpkg -i google-chrome-stable_current_amd64.deb

                - Common Options : 
                        dpkg -l <package-name>          : Lists the status of installed packages matching the given name (or partial name).
                        dpkg -L <package-name>          : A list of file paths where the package's components are installed (e.g., binaries, configuration files, libraries).
                        dpkg -s <package-name>          : Provides detailed information about the installed package, including: Version, Status, Description, Maintainer, Architecture.
                        dpkg -i <package-name>.deb
                        dpkg -r <package-name>
                        dpkg -P <package-name>
        
        2."apt":
                - apt is a higher-level package management tool used in 
                  Debian-based Linux distributions (like Debian, Ubuntu, etc.) to install, remove, and manage .deb packages.
                  It automatically resolves package dependencies and handles package conflicts and upgrades.
                - Advantages:
                        - apt automatically resolves package dependencies.
                        - apt handles package conflicts.
                        - apt handles package upgrades.
                        - apt can be used to search for packages, list installed packages, and list available packages.

                _____________________________________________________________________________________________________________
                # Commands:      
                        sudo apt list                             - List packages based on package names
                        sudo apt list --installed                 - Displays all installed packages on the system.  
                        
                        sudo apt depends  <package_name>          - Lists all dependencies of a package. 
                        sudo apt rdepends <package_name>          - Lists reverse dependencies (packages that depend on the specified package).   
                        
                        sudo apt search <package_name>            - Searches for packages matching the provided name.
                        sudo apt show   <package_name>            - Displays detailed information about a package, such as its description, dependencies, and source.
                        dpkg -l <package-name>                    - Lists the status of installed packages matching the given name (or partial name).
                        dpkg -L <package-name>                    - A list of file paths where the package's components are installed (e.g., binaries, configuration files, libraries).           
                        dpkg -s <package-name>                    - Provides detailed information about the installed package, including: Version, Status, Description, Maintainer, Architecture.

                        sudo apt update                           - update list of available packages
                        sudo apt upgrade                          - upgrade the system by installing/upgrading packages
                        sudo apt full-upgrade                     - upgrade the system by removing/installing/upgrading packages

                        sudo apt install <package_name>           - install packages
                        sudo apt install <package1> <package2>    - Installs multiple packages at once.
                        sudo apt install <package_name>=<version> - Installs a specific version of a package.
                        sudo apt install ./path_to_file.deb       - Installs a .deb package file while handling dependencies.
                        sudo apt reinstall                        - Reinstall packages
                        sudo apt --fix-broken install             - Fixes and completes broken package installations.

                        sudo apt remove <package_name>            - Removes a package but keeps its configuration files.
                        sudo apt purge  <package_name>            - Removes a package and its configuration files.
                        sudo apt autoremove                       - automatically remove all unused packages

                        sudo apt clean                            - Removes all cached .deb files in /var/cache/apt/archives/. 
                        sudo apt autoclean                        - Removes outdated .deb files no longer in repositories.           
                        
                        sudo add-apt-repository <repository>      - Adds a new repository to the sources list (ubunto@myWinHostMachine:/etc/apt$ cat sources.list
                                                                                                                ubunto@myWinHostMachine:/etc/apt/sources.list.d$ cat ubuntu.sources).
                        sudo apt update                           - Always update the package database after adding or modifying repositories.

                        sudo apt edit-sources                     - edit the source information file
                        sudo apt satisfy                          - satisfy dependency strings

      _____________________________________________________________________________________________________________
                # General Options
                        -h, --help:       Displays the help message and usage instructions for the apt command.

                        -v, --version:    Displays the version of apt currently installed on your system.

                        -q, --quiet:      Reduces the output verbosity.Can be used multiple times to further suppress messages.
                                          Example: apt -qq update (Minimal output)
                        
                        -y, --yes:        Automatically answers "yes" to all prompts during package installation or removal.
                                          Example: apt -y install curl
                        
                        --assume-no:      Automatically answers "no" to all prompts.

                        --force-yes:      Forces the operation even if it might cause issues.Use with caution!
                                          Example: apt --force-yes install risky-package
                        
                        --dry-run:        Simulates the command without actually making changes to the system.
                                          Example: apt --dry-run install package_name
-





