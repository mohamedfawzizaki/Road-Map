


### **`curl`** â€“ Command-line Tool for Data Transfers

`curl` (Client URL) is a powerful command-line tool used for transferring data to and from servers. It supports many protocols, including **HTTP**, **HTTPS**, **FTP**, **SFTP**, **SCP**, **IMAP**, **SMTP**, and more. Unlike `wget`, which primarily focuses on downloading files, `curl` excels in interacting with APIs and transferring data.

---

### **Basic Syntax**

```bash
curl [options] [URL]
```

---

### **Common Use Cases**

1. **Download a File**

   ```bash
   curl -O https://example.com/file.zip
   ```
   This downloads `file.zip` and saves it with the same name.

2. **Download a File with a Custom Name**

   ```bash
   curl -o custom_name.zip https://example.com/file.zip
   ```

3. **Resume a Download**

   ```bash
   curl -C - -O https://example.com/largefile.iso
   ```
   The `-C -` option allows resuming an interrupted download.

4. **Follow Redirects**

   ```bash
   curl -L https://short.url
   ```
   The `-L` option follows HTTP redirects to the final destination.

5. **Pass Data to a Server (HTTP POST)**

   ```bash
   curl -X POST -d "param1=value1&param2=value2" https://example.com/api
   ```
   This sends a `POST` request with form data to the specified URL.

6. **Send JSON Data**

   ```bash
   curl -X POST -H "Content-Type: application/json" -d '{"key": "value"}' https://example.com/api
   ```
   This sends a `POST` request with JSON data, setting the appropriate `Content-Type` header.

7. **Download a File via FTP**

   ```bash
   curl ftp://example.com/file.zip --user username:password
   ```

8. **Send a GET Request with Custom Headers**

   ```bash
   curl -H "Authorization: Bearer your_token" https://example.com/api
   ```

9. **Save Output to a File**

   ```bash
   curl https://example.com/data -o output.txt
   ```

10. **Show Only the Response Headers**

    ```bash
    curl -I https://example.com
    ```
    The `-I` option fetches only the headers using a `HEAD` request.

---

### **Common Options**

| **Option**             | **Description**                                                                                  |
|------------------------|--------------------------------------------------------------------------------------------------|
| `-O`                   | Saves the file with the original name from the URL.                                              |
| `-o <filename>`        | Saves the output to the specified file.                                                          |
| `-C -`                 | Resumes a partially downloaded file.                                                            |
| `-L`                   | Follows redirects.                                                                               |
| `-X <method>`          | Specifies the HTTP method to use (`GET`, `POST`, `PUT`, `DELETE`, etc.).                         |
| `-d <data>`            | Sends data with a `POST` or `PUT` request.                                                      |
| `-H <header>`          | Adds a custom header to the request.                                                            |
| `-I`                   | Fetches only the HTTP headers (`HEAD` request).                                                 |
| `-u <user:password>`   | Sets the username and password for authentication.                                              |
| `--limit-rate <speed>` | Limits the download speed (e.g., `100k` for 100 KB/s).                                          |
| `--compressed`         | Requests a compressed response from the server to save bandwidth.                               |
| `-k, --insecure`       | Allows insecure SSL connections (ignores certificate verification). Use with caution.           |
| `-v`                   | Enables verbose mode to see detailed request and response information.                          |
| `-s`                   | Runs in silent mode (no progress output).                                                       |

---

### **Authentication Examples**

1. **Basic Authentication**

   ```bash
   curl -u username:password https://example.com/protected
   ```

2. **Bearer Token Authentication**

   ```bash
   curl -H "Authorization: Bearer your_token" https://example.com/api
   ```

3. **OAuth 2.0 Token Retrieval**

   ```bash
   curl -X POST -d "grant_type=client_credentials&client_id=your_id&client_secret=your_secret" https://example.com/oauth/token
   ```

---

### **Advanced Use Cases**

1. **Uploading Files**

   ```bash
   curl -X POST -F "file=@/path/to/local/file.txt" https://example.com/upload
   ```
   The `-F` option specifies a file to upload.

2. **Download Multiple Files**

   ```bash
   curl -O https://example.com/file1.zip -O https://example.com/file2.zip
   ```
   This downloads multiple files in a single command.

3. **Limit Download Speed**

   ```bash
   curl --limit-rate 200k -O https://example.com/largefile.zip
   ```

4. **Set Timeout**

   ```bash
   curl --connect-timeout 10 -m 30 https://example.com
   ```
   - `--connect-timeout`: Timeout for connection establishment.
   - `-m`: Total maximum time for the entire operation.

5. **Save Cookies**

   ```bash
   curl -c cookies.txt https://example.com
   ```
   This saves the cookies to a file named `cookies.txt`.

6. **Use Cookies**

   ```bash
   curl -b cookies.txt https://example.com
   ```
   This sends the cookies from `cookies.txt` with the request.

---

### **Comparing `wget` and `curl`**

| Feature                     | `wget`                                     | `curl`                                     |
|-----------------------------|--------------------------------------------|-------------------------------------------|
| Primary Purpose             | Downloading files                          | Data transfer and API interaction         |
| Protocols Supported         | HTTP, HTTPS, FTP                           | HTTP, HTTPS, FTP, SFTP, SCP, IMAP, SMTP   |
| Recursive Downloading       | Yes                                        | No                                        |
| Resuming Downloads          | Yes                                        | Yes                                       |
| Handling of APIs            | Basic support                              | Full support with custom methods, headers |
| Output to File              | Automatic                                  | Requires `-o` or `-O`                     |
| Background Download         | Yes (`-b` option)                          | No (use with `&` to run in background)    |
| Redirection Handling        | Yes (`-L` is default)                      | No (must use `-L` option)                 |

---

### **Conclusion**

`curl` is an essential tool for interacting with web servers and APIs. Its flexibility in handling different protocols, sending custom headers, and supporting authentication makes it a preferred choice for developers. Whether you're downloading files, testing an API, or simulating requests, `curl` provides a versatile solution for all data transfer needs.