_______________________________________________________________________________________________________________________________________
                                                        Directives

Nginx has hundreds of directives categorized into different blocks. 
Below is a detailed list of all major directives, grouped by their respective contexts.

_______________________________________________________________________________________________________________________________________

 üîπ 1Ô∏è‚É£ Global Directives (Main Context)
These directives are outside all blocks (i.e., in `nginx.conf`, before `http`, `stream`, or `events`).

| Directive          | Description |
| `user`                | Defines the user/group Nginx runs as. |
| `worker_processes`    | Number of worker processes (e.g., `auto`). |
| `worker_rlimit_nofile`| Limits the number of open files per worker. |
| `pid`                 | Defines the file storing the Nginx process ID. |
| `daemon`              | Runs Nginx in the background (`on`/`off`). |
| `error_log`           | Defines the main error log file. |
| `worker_priority`     | Sets worker process priority. |

_______________________________________________________________________________________________________________________________________

 üîπ 2Ô∏è‚É£ `events` Block Directives (Connection Handling)
Manages how Nginx handles concurrent connections.

| `worker_connections` | Maximum concurrent connections per worker. |
| `multi_accept`       | Accept multiple connections at once (`on`/`off`). |
| `use`               | Specifies the event model (`epoll`, `kqueue`). |
| `accept_mutex`       | Enables serialized accept mutex (`on`/`off`). |

_______________________________________________________________________________________________________________________________________

 üîπ 3Ô∏è‚É£ `http` Block Directives (Web Server)
Defines HTTP settings for all virtual hosts (server blocks).

| `include`            | Includes external config files. |
| `default_type`       | Default MIME type (`text/plain`). |
| `sendfile`           | Uses OS sendfile for better performance (`on`). |
| `tcp_nopush`         | Optimizes TCP packets for large responses. |
| `tcp_nodelay`        | Disables Nagle‚Äôs algorithm (faster small packets). |
| `keepalive_timeout`  | How long to keep idle connections open. |
| `gzip`              | Enables gzip compression. |
| `gzip_types`        | Defines which MIME types to compress. |
| `server_tokens`      | Hides Nginx version in headers (`off` for security). |
| `client_max_body_size` | Max size of client request body. |
| `log_format`         | Defines a custom log format. |
| `access_log`        | Location of access logs. |
| `error_log`         | Location of error logs. |

_______________________________________________________________________________________________________________________________________

 üîπ 4Ô∏è‚É£ `server` Block Directives (Virtual Hosts)
Defines a virtual server that listens for specific requests.
| `listen`            | Specifies the port (e.g., `80`, `443 ssl`). |
| `server_name`       | Defines domain names (`example.com`). |
| `root`             | Root directory for files. |
| `index`            | Default files (`index.html`, `index.php`). |
| `error_page`       | Custom error pages (`404 /404.html`). |
| `return`           | Redirects (`return 301 https://new.com`). |
| `rewrite`          | Rewrites URLs (`rewrite ^/old /new permanent`). |
| `ssl_certificate`  | SSL certificate file. |
| `ssl_certificate_key` | SSL private key file. |

_______________________________________________________________________________________________________________________________________

 üîπ 5Ô∏è‚É£ `location` Block Directives (Request Handling)
Handles specific request paths inside a `server` block.

| `location`          | Defines request path handling. |
| `try_files`        | Checks for files before returning 404. |
| `alias`            | Maps a path to a different directory. |
| `return`           | Redirects or sends responses. |
| `proxy_pass`       | Forwards requests to a backend server. |
| `fastcgi_pass`     | Passes requests to a FastCGI server (PHP). |
| `uwsgi_pass`       | Passes requests to a uWSGI server. |
| `limit_req`        | Limits requests per second. |

_______________________________________________________________________________________________________________________________________

 üîπ 6Ô∏è‚É£ `proxy_` Directives (Reverse Proxy)
Used when forwarding requests to backend servers.

| `proxy_pass`        | Sends requests to backend (`http://127.0.0.1:3000`). |
| `proxy_set_header`  | Modifies request headers. |
| `proxy_buffering`   | Enables buffering to improve performance. |
| `proxy_cache`       | Enables proxy caching. |
| `proxy_intercept_errors` | Allows Nginx to handle backend errors. |

_______________________________________________________________________________________________________________________________________

 üîπ 7Ô∏è‚É£ `fastcgi_` Directives (PHP Processing)
Used when sending requests to PHP-FPM (or other FastCGI servers).

| `fastcgi_pass`      | Sends requests to FastCGI (PHP). |
| `fastcgi_param`     | Passes parameters to FastCGI. |
| `fastcgi_index`     | Default script to run (`index.php`). |
| `fastcgi_buffers`   | Defines FastCGI buffering. |

_______________________________________________________________________________________________________________________________________

 üîπ 8Ô∏è‚É£ `stream` Block Directives (TCP/UDP Proxy)
Used for proxying raw TCP/UDP traffic (e.g., database, SSH).

| `listen`         | Defines port for TCP/UDP traffic. |
| `proxy_pass`     | Sends traffic to another server. |
| `ssl_preread`    | Extracts SSL info before passing connections. |
| `limit_conn`     | Limits concurrent connections. |

_______________________________________________________________________________________________________________________________________

 üîπ 9Ô∏è‚É£ `mail` Block Directives (Mail Proxy)
Used for proxying SMTP, IMAP, and POP3 mail traffic.

| `listen`         | Defines port for mail traffic. |
| `protocol`       | Defines protocol (`smtp`, `imap`, `pop3`). |
| `auth_http`      | Defines authentication server. |
| `proxy_pass`     | Sends requests to a mail server. |

_______________________________________________________________________________________________________________________________________

 üîπ üîü `limit_` Directives (Rate Limiting & Security)
Used to throttle requests and prevent abuse.

| `limit_req_zone`    | Defines rate-limiting key. |
| `limit_req`         | Limits requests per second. |
| `limit_conn_zone`   | Defines connection-limiting key. |
| `limit_conn`        | Limits concurrent connections. |

_______________________________________________________________________________________________________________________________________

 üîπ 1Ô∏è‚É£1Ô∏è‚É£ `geo` and `map` Directives (Dynamic Rules)
Used for IP-based rules and custom variables.

| `geo`         | Defines a mapping of IPs to variables. |
| `map`         | Maps input values to output values. |

Example:
````````````````````````````````````````````````````````````````````nginx
geo $geo_country {
    default US;
    1.2.3.4 DE;
}
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 üîπ 1Ô∏è‚É£2Ô∏è‚É£ `upstream` Block Directives (Load Balancing)
Used for defining backend servers.

| `server`         | Defines a backend server. |
| `least_conn`     | Sends traffic to the least busy server. |
| `ip_hash`        | Uses client IP for consistent routing. |

Example:
````````````````````````````````````````````````````````````````````nginx
upstream backend {
    server 127.0.0.1:8000;
    server 127.0.0.1:8001;
}
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 üîπ Summary
‚úî Global Directives ‚Üí `worker_processes`, `user`  
‚úî Events Directives ‚Üí `worker_connections`, `multi_accept`  
‚úî HTTP Directives ‚Üí `gzip`, `keepalive_timeout`  
‚úî Server Directives ‚Üí `server_name`, `listen`  
‚úî Location Directives ‚Üí `proxy_pass`, `try_files`  
‚úî Stream & Mail Directives ‚Üí `ssl_preread`, `proxy_pass`  
‚úî Rate Limiting ‚Üí `limit_req`, `limit_conn`  
‚úî Load Balancing ‚Üí `upstream`, `ip_hash`  

_______________________________________________________________________________________________________________________________________
